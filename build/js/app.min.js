(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
  "hero": {
    "stats": {
      "off": 1,
      "def": 1,
      "spd": 1,
      "guts": 1,
      "vit": 1,
      "iq": 20,
      "luck": 1
    },
    "equip": {
      "weapon": null,
      "arm": null,
      "body": null,
      "other": null
    },
    "sprite": "hero",
    "level": 1,
  }
}

},{}],2:[function(require,module,exports){
module.exports={
  "mushroom": {
    "stats": {
      "hp": 10,
      "def": 5,
      "off": 3,
      "guts": 10,
      "luck": 30,
      "miss": 20
    },
    "xp": 6,
    "money": 6,
    "level": 2,
    "music": "silly",
    "strategy": "random",
    "actions": ["bash", "heal", "bash", "mushroom"],
    "drop": "fungi",
    "dropfreq": 2,
    "status": "normal"
  }
}

},{}],3:[function(require,module,exports){
module.exports={
  "someevent": {
    "pages": [{
      "trigger": "action",
      "type": "fixed",
      "sprite": "somespriteid",
      "conditions": {},
      "commands": []
    }]
  }
}

},{}],4:[function(require,module,exports){
module.exports={
  "crackedbat": {
    "type": "weapon",
    "cost": 18,
    "stats": {
      "off": 4
    }
  },
  "ramen": {
    "type": "food",
    "cost": 12,
    "stats": {
      "hp": 30
    }
  }
}

},{}],5:[function(require,module,exports){
module.exports={
    "CHARACTER_NAME_hero": "Izumi",

    "ITEM_NAME_ramen": "Ramen",

    "ENEMY_NAME_mushroom": "Mushroom"
}

},{}],6:[function(require,module,exports){
module.exports={
  "map_house": {"type": "map", "path": "maps/house.json",
    "tileset": ["tiles_house"],
    "bgm": "bgm_boymeetsgirl"
  },

  "tiles_house": {"type": "image", "path": "images/house_tileset.png"},

  "image_dialog": {"type": "image", "path": "images/dialog.png"},
  "battlebg_1": {"type": "image", "path": "images/battlebg/1.png"},

  "font_basic": {"type": "bitmapfont", "path": "fonts/basic.png", "meta": "fonts/basic.xml"},
  "font_mrsaturn": {"type": "bitmapfont", "path": "fonts/mrsaturn.png", "meta": "fonts/mrsaturn.xml"},

  "sfx_door_open": {"type": "audio", "path": ["audio/effect_door_open.wav"]},
  "bgm_boymeetsgirl": {"type": "audio", "path": ["audio/background_boymeetsgirl.mp3"]},

  "default": {"type": "resources", "resources": ["image_dialog", "font_basic", "sfx_door_open", "battlebg_1"]}
}

},{}],7:[function(require,module,exports){
module.exports={
    "worldmenu": {
        "type": "menu",
        "x": 8,
        "y": 8,
        "width": 64,
        "height": 64,
        "rows": 3
    },
    "worldgoodsmenu": {
        "type": "menu",
        "x": 32,
        "y": 32,
        "width": 152,
        "height": 64,
        "rows": 3
    },
    "matte": {
        "type": "matte"
    },
    "new": {
        "type": "frame",
        "x": 8,
        "y": 8,
        "width": 64,
        "height": 64
    },
    "battlebg": {
        "type": "battlebg"
    }
}

},{}],8:[function(require,module,exports){
/* global Phaser */

var properties = require('./properties');
var states = {
    boot: require('./states/boot.js'),
    preloader: require('./states/preloader.js'),
    game: require('./states/game.js')
};
var game = new Phaser.Game(properties.size.x, properties.size.y, Phaser.AUTO, 'game', null, false, false);

var Config = require('./utils/Config');
Config.load({
    resources: require('../config/resources.json'),
    characters: require('../config/characters.json'),
    enemies: require('../config/enemies.json'),
    events: require('../config/events.json'),
    items: require('../config/items.json'),
    lang: require('../config/lang.json'),
    ui: require('../config/ui.json')    
});

// Automatically register each state.
Object.keys(states).forEach(function(key) {
    var state = states[key];
    game.state.add(key, state);
});

game.state.start('boot');

},{"../config/characters.json":1,"../config/enemies.json":2,"../config/events.json":3,"../config/items.json":4,"../config/lang.json":5,"../config/resources.json":6,"../config/ui.json":7,"./properties":19,"./states/boot.js":20,"./states/game.js":21,"./states/preloader.js":22,"./utils/Config":36}],9:[function(require,module,exports){
/* global Phaser */

function Character(game, x, y, skin, physics) {
    var offest = skin * 8;
    Phaser.Sprite.call(this, game, x, y, 'actors', offest + 4);
    this.animations.add('up', [offest + 0, offest + 1], 5, true);
    this.animations.add('right', [offest + 2, offest + 3], 10, true);
    this.animations.add('down', [offest + 4, offest + 5], 5, true);
    this.animations.add('left', [offest + 6, offest + 7], 10, true);

    this.anchor.setTo(0.5, 1);

    if (physics) {
        game.physics.arcade.enable(this);
        this.body.setSize(14, 7, 5, 27);
        game.slopes.enable(this);
    }
}

Character.prototype = Object.create(Phaser.Sprite.prototype);
Character.prototype.constructor = Character;

module.exports = Character;

},{}],10:[function(require,module,exports){
var Character = require('./Character');

function Enemy(game, type, x, y) {
    Character.call(this, game, x, y, 7, true);
    this.timer = 0;
    this.accel = 80;
    this.visLife = 60;

    this.velX = 0;
    this.velY = 0;
}

Enemy.prototype = Object.create(Character.prototype);
Enemy.prototype.constructor = Enemy;

Enemy.prototype.update = function () {
    if (!this.inCamera) {
        this.visLife--;
        if (this.visLife < 0) {
            this.kill();
            return;
        }
    } else {
        this.visLife = 60;
    }

    if (this.game.state.getCurrentState().playerDisabled) {
        this.body.velocity.x = 0;
        this.body.velocity.y = 0;
        this.animations.stop();
        return;
    }

    this.timer--;
    if (this.timer <= 0) {
        this.velX = Math.floor(Math.random() * 2 - 1) * this.accel;
        this.velY = Math.floor(Math.random() * 2 - 1) * this.accel;
        this.timer = 60;
    }

    this.body.velocity.x = this.velX;
    this.body.velocity.y = this.velY;

    var direction = null;

    if ((this.body.velocity.x < this.body.velocity.y) && (this.body.velocity.x < 0))
    {
        direction = 'left';
    }
    else if ((this.body.velocity.x > this.body.velocity.y) && (this.body.velocity.x > 0))
    {
        direction = 'right';
    }

    if ((this.body.velocity.y < this.body.velocity.x) && (this.body.velocity.y < 0))
    {
        direction = 'up';
    }
    else if ((this.body.velocity.y > this.body.velocity.x) && (this.body.velocity.y > 0))
    {
        direction = 'down';
    }

    if (direction) {
        this.play(direction);
    } else {
        this.animations.stop();
    }
};

Enemy.prototype.onTouch = function() {
    this.game.state.getCurrentState().switchSubState('battle');
    this.kill();
};

module.exports = Enemy;

},{"./Character":9}],11:[function(require,module,exports){
var Character = require('./Character');

function Follower(game, skin, followCharacter) {
    Character.call(this, game, followCharacter.x, followCharacter.y, skin, false);
    this.initQueue(followCharacter, 16);
}

Follower.prototype = Object.create(Character.prototype);
Follower.prototype.constructor = Follower;

Follower.prototype.initQueue = function(followCharacter, followMax) {
    this.followCharacter = followCharacter;
    this.followQueue = [];
    this.leaderCursor = 0;
    this.followerCursor = 1;
    this.followMax = followMax;
    for (var f = 0; f < followMax; f++) {
        this.followQueue[f] = {animation: 'down', x: followCharacter.x, y: followCharacter.y};
    }
};

Follower.prototype.updateQueue = function() {
    this.leaderCursor = (this.leaderCursor + 1) % this.followMax;
    this.followerCursor = (this.followerCursor + 1) % this.followMax;
    this.followQueue[this.leaderCursor].animation = this.followCharacter.animations.currentAnim.name;
    this.followQueue[this.leaderCursor].x = this.followCharacter.x;
    this.followQueue[this.leaderCursor].y = this.followCharacter.y;
    var followerMeta = this.followQueue[this.followerCursor];
    this.x = followerMeta.x;
    this.y = followerMeta.y;
    this.play(followerMeta.animation);
};

Follower.prototype.update = function () {
    if (this.game.state.getCurrentState().playerDisabled) {
        this.animations.stop();
        return;
    }

    // Handle Following
    if (this.followCharacter.animations.currentAnim.isPlaying) {
        this.updateQueue();
    } else {
        this.animations.stop();
    }
}

module.exports = Follower;

},{"./Character":9}],12:[function(require,module,exports){
var Character = require('./Character');

function Player(game, map, x, y, skin) {
    Character.call(this, game, x, y, skin, true);
    this.map = map;

    // this.body.drag.x = 640;
    // this.body.drag.y = 640;
    // this.body.maxVelocity.x = 80;
    // this.body.maxVelocity.y = 80;
    this.accel = 80;
}

Player.prototype = Object.create(Character.prototype);
Player.prototype.constructor = Player;

Player.prototype.update = function () {
    this.body.velocity.x = 0;
    this.body.velocity.y = 0;
    if (this.game.state.getCurrentState().playerDisabled) {
        this.animations.stop();
        return;
    }

    var direction = null;
    var cursors = this.game.state.getCurrentState().cursors;

    if (cursors.left.isDown)
    {
        this.body.velocity.x = -this.accel;
        direction = 'left';
    }
    else if (cursors.right.isDown)
    {
        this.body.velocity.x = this.accel;
        direction = 'right';
    }

    if (cursors.up.isDown)
    {
        this.body.velocity.y = -this.accel;
        direction = 'up';
    }
    else if (cursors.down.isDown)
    {
        this.body.velocity.y = this.accel;
        direction = 'down';
    }

    if (direction) {
        this.play(direction);
    } else {
        this.animations.stop();
    }
};

module.exports = Player;

},{"./Character":9}],13:[function(require,module,exports){
/* global Phaser */

var Follower = require('./Follower');
var Player = require('./Player');

function PlayerGroup(game, currentMap, x, y) {
    Phaser.Group.call(this, game);
    this.player = new Player(game, currentMap, x, y, 0);
    var follower = new Follower(game, 1, this.player);
    var follower2 = new Follower(game, 2, follower);
    this.add(this.player);
    this.add(follower);
    this.add(follower2);
}

PlayerGroup.prototype = Object.create(Phaser.Group.prototype);
PlayerGroup.prototype.constructor = PlayerGroup;

PlayerGroup.prototype.reset = function (x, y) {
    this.player.reset(x, y);
};

PlayerGroup.prototype.getLeader = function () {
    return this.player;
};

module.exports = PlayerGroup;

},{"./Follower":11,"./Player":12}],14:[function(require,module,exports){
var Event = require('./Event');

function DialogEvent(game, settings) {
    Event.call(this, game, settings);
}

DialogEvent.prototype = Object.create(Event.prototype);
DialogEvent.prototype.constructor = DialogEvent;

DialogEvent.prototype.onTouch = function() {
    var properties = this.settings.properties;
    this.game.showDialog(properties.text);
};

module.exports = DialogEvent;

},{"./Event":15}],15:[function(require,module,exports){
/* global Phaser */

function Event(game, settings) {
    this.game = game;
    this.settings = settings;

    Phaser.Sprite.call(this, game, settings.x || 0, settings.y || 0);
    this.renderable = false;
    this.width = settings.width || 16;
    this.height = settings.height || 16;
    game.physics.arcade.enable(this);
    this.body.immovable = true;
}

Event.prototype = Object.create(Phaser.Sprite.prototype);
Event.prototype.constructor = Event;

Event.prototype.onTouch = function() {};

module.exports = Event;

},{}],16:[function(require,module,exports){
var Event = require('./Event');

function Spawn(game, settings) {
    Event.call(this, game, settings);
    this.flagIsVisible = false;
}

Spawn.prototype = Object.create(Event.prototype);
Spawn.prototype.constructor = Spawn;

Spawn.prototype.update = function() {
    if (this.inCamera && !this.flagIsVisible) {
        this.flagIsVisible = true;
        this.onVisible();
    } else if (!this.inCamera && this.flagIsVisible) {
        this.flagIsVisible = false;
    }
}

Spawn.prototype.onVisible = function() {
    this.game.spawnEnemy(this.settings.type, this.body.x + this.body.width / 2, this.body.y + this.body.height / 2);
};

module.exports = Spawn;

},{"./Event":15}],17:[function(require,module,exports){
var Event = require('./Event');

function TransportEvent(game, settings) {
    Event.call(this, game, settings);
}

TransportEvent.prototype = Object.create(Event.prototype);
TransportEvent.prototype.constructor = TransportEvent;

TransportEvent.prototype.onTouch = function() {
    var properties = this.settings.properties;
    this.game.transport(properties.map, properties.location);
};

module.exports = TransportEvent;

},{"./Event":15}],18:[function(require,module,exports){
var EventTypes = {
    transport: require('../events/TransportEvent'),
    dialog: require('../events/DialogEvent')
};
var Spawn = require('../events/Spawn');

function Map(game, config) {
    this.game = game;
    this.id = config.id;
    this.map = game.add.tilemap(config.id);
    config.tileset.forEach(function(tileset) {
        this.map.addTilesetImage(tileset, tileset);
    }, this);

    game.world.setBounds(0, 0, this.map.widthInPixels, this.map.heightInPixels);

    this.backgroundLayer = this.map.createLayer('background');
    this.foregroundLayer = this.map.createLayer('foreground');
    // floatingLayer = map.createLayer('floating');

    this.locations = this.setupLocations(this.map);
    this.events = this.setupEvents(this.game, this.map);
    this.spawns = this.setupSpawns(this.game, this.map);

    var slopeLookup = {
        291: null,
        158: 'HALF_TOP_RIGHT',
        159: 'HALF_TOP_LEFT',
        97: null,
        80: 'HALF_TOP_RIGHT',
        81: 'HALF_TOP_LEFT',
        82: 'HALF_TOP_LEFT'
    }
    var slopeMap = [];
    for (var i = 0; i <= 291; i++) {
        slopeMap.push(slopeLookup[i] !== null ? slopeLookup[i] || 'FULL' : undefined);
    }
    this.game.game.slopes.convertTilemapLayer(this.backgroundLayer, slopeMap);
    // this.map.setCollisionBetween(0, 291, true, 'background');
}

Map.prototype.getEvents = function () {
    return this.events;
}

Map.prototype.setupSpawns = function (game, map) {
    var spawns = [];
    map.objects['Spawns'].forEach(function(element){
        spawns.push(new Spawn(game, element));
    });
    return spawns;
}

Map.prototype.setupEvents = function (game, map) {
    var events = [];
    map.objects['Events'].forEach(function(element){
        events.push(new (EventTypes[element.type])(game, element));
    });
    return events;
}

Map.prototype.setupLocations = function (map) {
    var locations = {};
    map.objects['Locations'].forEach(function(element){
        locations[element.name] = {
            x: element.x + element.width / 2,
            y: element.y + element.height / 2
        };
    });
    return locations;
}

Map.prototype.getLocation = function(id) {
    return this.locations[id];
}

module.exports = Map;

},{"../events/DialogEvent":14,"../events/Spawn":16,"../events/TransportEvent":17}],19:[function(require,module,exports){
var npmProperties = require('../package.json');

module.exports = {
    title: 'Earthbound.js',
    description: npmProperties.description,
    port: 3017,
    liveReloadPort: 3018,
    mute: false,
    showStats: true,
    size: {
        x: 256,
        y: 224
    },
    analyticsId: 'UA-5075951-7'
};

},{"../package.json":39}],20:[function(require,module,exports){
/* global Stats */

var properties = require('../properties');
var boot = {};

boot.create = function () {
    if (properties.showStats) {
        addStats(this.game);
    }

    this.game.sound.mute = properties.mute;

    this.game.state.start('preloader');
};

function addStats(game) {
    var stats = new Stats();

    stats.setMode(0);

    stats.domElement.style.position = 'absolute';
    stats.domElement.style.right = '0px';
    stats.domElement.style.top = '0px';

    document.body.appendChild(stats.domElement);

    // In order to correctly monitor FPS, we have to make calls to the stats package before and after phaser's update.
    var oldUpdate = game.update;
    game.update = function() {
        stats.begin();
        oldUpdate.apply(game, arguments);
        stats.end();
    };
}

module.exports = boot;

},{"../properties":19}],21:[function(require,module,exports){
/* global Phaser */

var Config = require('../utils/Config')
var Loader = require('../utils/Loader');
var SubState = require('../utils/SubState');
var PlayerGroup = require('../entities/PlayerGroup');
var Enemy = require('../entities/Enemy');
var Map = require('../map/Map');
var substates = {
    world: require('../substates/World'),
    transition: require('../substates/Transition'),
    dialog: require('../substates/Dialog'),
    battle: require('../substates/Battle'),
    worldmenu: require('../substates/WorldMenu'),
    worldgoodsmenu: require('../substates/WorldGoodsMenu')
};
var DialogComponent = require('../ui/DialogComponent');
var uiTypes = require('../ui');

var game = {};

game.substate = new SubState(game, substates);

game.init = function(mapid, startLocation) {
    this.mapId = mapid;
    this.startLocationId = startLocation;
}

game.preload = function () {
    Loader.loadResource(game.game, 'default');
    Loader.loadResource(game.game, this.mapId);

    game.load.spritesheet('actors', 'images/actors.png', 24, 32);
}

game.create = function () {
    this.mapConfig = Config.getResource(this.mapId);

    this.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.plugins.add(Phaser.Plugin.ArcadeSlopes);
    game.physics.arcade.gravity.y = 0;

    if (this.mapConfig.bgm) {
        this.backgroundMusic = game.add.audio(this.mapConfig.bgm);
        this.backgroundMusic.play('', 0, 1, true);
    }
    this.soundEffects = {
        sfx_door_open: game.add.audio('sfx_door_open')
    };
    this.currentMap = new Map(game, this.mapConfig);
    this.enemies = game.add.group();

    this.spawns = game.add.group();
    this.currentMap.spawns.forEach(function (spawn) {
        this.spawns.add(spawn);
    }, this);

    var playerStart = this.currentMap.getLocation(this.startLocationId);
    this.player = new PlayerGroup(game.game, this.currentMap, playerStart.x, playerStart.y);
    this.chatDialog = new DialogComponent(game.game);
    this.setupUI();
    this.switchSubState('world');

    this.cursors = game.input.keyboard.createCursorKeys();
    this.actionKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
    this.cancelKey = game.input.keyboard.addKey(Phaser.Keyboard.X);
    this.game.input.keyboard.addKeyCapture([ Phaser.Keyboard.SPACEBAR, Phaser.Keyboard.X ]);

    this.fadeIn();
};

game.setupUI = function() {
    var uiConfig = Config.getConfig('ui');
    var ui = {};
    Object.keys(uiConfig).forEach(function (key) {
        var config = uiConfig[key];
        ui[key] = new (uiTypes[config.type])(game.game, config);
    });
    this.ui = ui;
}

/* Simple Debug
game.render = function () {
    game.game.debug.body(this.player);
}
*/

game.update = function () {
    this.substate.update();
}

game.switchSubState = function (id) {
    this.substate.switch(id);
};

/* ------- Actions ---------- */

game.fadeIn = function (callback) {
    this.ui.matte.transition(0x000000, 0, 500, callback);
};

game.fadeOut = function (callback) {
    this.ui.matte.transition(0x000000, 1, 500, callback);
};

game.encounterIn = function (callback) {
    this.ui.matte.transition(0xFF0000, 0.5, 500, callback);
};

game.encounterOut = function (callback) {
    this.ui.matte.transition(0xFF0000, 0, 10, callback);
};

game.hideWorld = function () {
    this.player.visible = false;
    this.enemies.visible = false;
    this.currentMap.backgroundLayer.visible = false;
    this.currentMap.foregroundLayer.visible = false;
    this.ui.matte.matte.visible = false;
    // this.world.visible = false;
}

game.showWorld = function () {
    this.player.visible = true;
    this.enemies.visible = true;
    this.currentMap.backgroundLayer.visible = true;
    this.currentMap.foregroundLayer.visible = true;
    this.ui.matte.matte.visible = true;
    // this.world.visible = true;
}

game.hideBattle = function () {
    this.ui.battlebg.hide();
}

game.showBattle = function () {
    this.ui.battlebg.show();
}

game.soundEffectPlay = function (id) {
    this.soundEffects[id].play();
};

game.transport = function(mapId, locationId) {
    var self = this;
    this.switchSubState('transition');
    this.soundEffectPlay('sfx_door_open');
    this.fadeOut(function() {
        if (self.mapId === mapId) {
            var locationPos = self.currentMap.getLocation(locationId);
            self.player.reset(locationPos.x, locationPos.y);
            self.fadeIn(function() {
                self.switchSubState('world');
            });
        } else {
            self.backgroundMusic.stop();
            self.state.start('game', true, false, mapId, locationId);
        }
    });
};

game.showDialog = function (displayText) {
    this.chatDialog.setText(displayText);
    this.switchSubState('dialog');
}

game.mapTint = function (tint) {
    this.currentMap.foregroundLayer.tint = tint;
    this.currentMap.backgroundLayer.tint = tint;
}

game.spawnEnemy = function (type, x, y) {
    this.enemies.add(new Enemy(this.game, type, x, y));
}

// Use //foregroundLayer.tint = 0x222299; to simulate nighttime


module.exports = game;

},{"../entities/Enemy":10,"../entities/PlayerGroup":13,"../map/Map":18,"../substates/Battle":23,"../substates/Dialog":24,"../substates/Transition":26,"../substates/World":27,"../substates/WorldGoodsMenu":28,"../substates/WorldMenu":29,"../ui":35,"../ui/DialogComponent":31,"../utils/Config":36,"../utils/Loader":37,"../utils/SubState":38}],22:[function(require,module,exports){
var preloader = {};

preloader.preload = function () {
    // this.game.load.image('logo', 'images/phaser.png');
};

preloader.create = function () {
    this.game.state.start('game', true, false, 'map_house', 'start');
};

module.exports = preloader;

},{}],23:[function(require,module,exports){

var BattleSubState = function(state) {
    this.parent = state;
}

BattleSubState.prototype.transitionIn = function(callback) {
    var state = this.parent;
    state.encounterIn(function () {
        state.hideWorld();
        state.showBattle();
        callback();
    });
}

BattleSubState.prototype.update = function() {
    var state = this.parent;
    if (state.actionKey.isDown) {
        state.switchSubState('world');
    }
};

BattleSubState.prototype.transitionOut = function(callback) {
    var state = this.parent;
    state.showWorld();
    state.hideBattle();
    state.encounterOut(callback);
}

module.exports = BattleSubState;

},{}],24:[function(require,module,exports){

var DialogSubState = function(state) {
    this.parent = state;
}

DialogSubState.prototype.enter = function() {
    this.parent.chatDialog.show();
};

DialogSubState.prototype.update = function() {
    var state = this.parent;

    if (state.actionKey.isDown) {
        state.switchSubState('world');
    }
};

DialogSubState.prototype.exit = function() {
    this.parent.chatDialog.hide();
};

module.exports = DialogSubState;

},{}],25:[function(require,module,exports){
var MenuSubState = function(state) {
    this.parent = state;
}

MenuSubState.prototype.enter = function() {
    var state = this.parent;
    this.menu = state.ui[this.menuId];
    this.menu.setOptions(this.getOptions());
    this.menu.show();
    this.setCoolOff();
};

MenuSubState.prototype.update = function() {
    var state = this.parent;

    if (this.coolOff <= 0) {
        if (state.cancelKey.isDown) {
            this.onCancel && this.onCancel();
        } else if (state.actionKey.isDown) {
            this.onSelect && this.onSelect(this.menu.getSelectedId());
        } else if (state.cursors.up.isDown) {
            this.menu.selectionUp()
            this.setCoolOff();
        } else if (state.cursors.down.isDown) {
            this.menu.selectionDown()
            this.setCoolOff();
        }
    } else {
        this.coolOff--;
    }
};

MenuSubState.prototype.setCoolOff = function() {
    this.coolOff = 10;
};

module.exports = MenuSubState;

},{}],26:[function(require,module,exports){

var TransitionSubState = function(state) {
    this.parent = state;
};

TransitionSubState.prototype.enter = function() {

}

module.exports = TransitionSubState;

},{}],27:[function(require,module,exports){
/* global Phaser */

var WorldSubState = function(parent) {
    this.parent = parent;
}

WorldSubState.prototype.enter = function() {
    var state = this.parent;
    state.playerDisabled = false;
    state.game.camera.follow(state.player.getLeader(), Phaser.Camera.FOLLOW_TOPDOWN);
    this.actionCoolOff = 20;
};

WorldSubState.prototype.update = function() {
    var state = this.parent;

    if (this.actionCoolOff > 0) {
        this.actionCoolOff--;
    } else {
        if (state.cancelKey.isDown) {
            state.switchSubState('worldmenu');
        }
    }

    state.enemies.sort('y', Phaser.Group.SORT_ASCENDING);
    state.player.sort('y', Phaser.Group.SORT_ASCENDING);

    state.physics.arcade.collide(state.enemies, state.currentMap.backgroundLayer);

    if (!state.playerDisabled) {
        var events = state.currentMap.getEvents();

        state.physics.arcade.collide(state.player, state.currentMap.backgroundLayer);
        state.physics.arcade.collide(state.player, state.enemies, function(player, enemy) {
            enemy.onTouch();
        });
        state.physics.arcade.collide(state.player.getLeader(), events, function(player, event) {
            event.onTouch();
        });
    }
};

WorldSubState.prototype.exit = function() {
    this.parent.playerDisabled = true;
}

module.exports = WorldSubState;

},{}],28:[function(require,module,exports){
var MenuSubState = require('./Menu');

var WorldGoodsMenuSubState = function(state) {
    MenuSubState.call(this, state);
}

WorldGoodsMenuSubState.prototype = Object.create(MenuSubState.prototype);
WorldGoodsMenuSubState.prototype.constructor = WorldGoodsMenuSubState;

WorldGoodsMenuSubState.prototype.menuId = 'worldgoodsmenu';

WorldGoodsMenuSubState.prototype.getOptions = function() {
    return [
        {id: 'sneaker', text: 'Old Sneaker'},
        {id: 'stungun', text: 'Stun Gun'},
        {id: 'sock', text: 'Sock'}
    ];
};

WorldGoodsMenuSubState.prototype.onCancel = function() {
    this.menu.hide();
    this.parent.switchSubState('worldmenu');
};

WorldGoodsMenuSubState.prototype.onSelect = function(id) {

};

module.exports = WorldGoodsMenuSubState;

},{"./Menu":25}],29:[function(require,module,exports){
var MenuSubState = require('./Menu');

var WorldMenuSubState = function(state) {
    MenuSubState.call(this, state);
}

WorldMenuSubState.prototype = Object.create(MenuSubState.prototype);
WorldMenuSubState.prototype.constructor = WorldMenuSubState;

WorldMenuSubState.prototype.menuId = 'worldmenu';

WorldMenuSubState.prototype.getOptions = function() {
    return [
        {id: 'goods', text: 'Goods'},
        {id: 'equip', text: 'Equip'},
        {id: 'status', text: 'Status'}
    ];
};

WorldMenuSubState.prototype.onCancel = function() {
    this.menu.hide();
    this.parent.switchSubState('world');
};

WorldMenuSubState.prototype.onSelect = function(id) {
    switch (id) {
        case 'goods': this.parent.switchSubState('worldgoodsmenu'); break;
    }
};

module.exports = WorldMenuSubState;

},{"./Menu":25}],30:[function(require,module,exports){
/* global Phaser */

function BattleBackgroundLine(game, y, width, height, skin) {
    Phaser.Sprite.call(this, game, 0, y, skin);
    this.lineWidth = width;
    this.lineHeight = height;
    this.t = 0;
}

BattleBackgroundLine.prototype = Object.create(Phaser.Sprite.prototype);
BattleBackgroundLine.prototype.constructor = BattleBackgroundLine;

BattleBackgroundLine.prototype.update = function () {
    var t = this.t++;
    var y = this.y;
    var width = this.lineWidth;
    var height = this.lineHeight;

    var A = 30;
    var F = 0.03;
    var S = 0.04;

    var offset = A * Math.sin(F * y + S * t);
    this.crop(new Phaser.Rectangle(Math.floor((offset + width) % width), y % 64, width, height));
    this.updateCrop();
};

function BattleBackground(game, config) {
    var width = game.width;
    var height = game.height;
    var background = game.add.group();
    var size = 2;

    background.fixedToCamera = true;
    for (var y = 0; y < height; y += 2) {
        background.add(new BattleBackgroundLine(game, y, width, size, 'battlebg_1'));
    }

    background.visible = false;
    this.background = background;
};

BattleBackground.prototype.show = function() {
    this.background.visible = true;
};

BattleBackground.prototype.hide = function() {
    this.background.visible = false;
};

module.exports = BattleBackground;

},{}],31:[function(require,module,exports){
/* global Phaser */

function DialogComponent (game) {
    game.cache.addNinePatch('ninepatch_dialog', 'image_dialog', null, 8, 8, 16, 16);
    this.container = new Phaser.NinePatchImage(game, 96, 8, 'ninepatch_dialog');
    this.container.targetWidth = 152;
    this.container.targetHeight = 64
    this.container.fixedToCamera = true;
    this.chatTxt = [];
    this.lineCount = 3;
    for (var i = 0; i < this.lineCount; i++) {
        var chatLine = game.make.bitmapText(8, 8 + (i * 16), 'font_basic', '', 16, this.container);
        chatLine.maxWidth = 128;
        this.container.addChild(chatLine);
        this.chatTxt.push(chatLine);
    }
    this.container.visible = false;
    this.clear();
    game.time.events.loop(25, this.update, this);
};

DialogComponent.prototype.update = function() {
    if (this.buffer.length > 0) {
        // If we have more text to show, and we have reached lineCount
        if (this.currentLine >= this.lineCount) {
            this.currentLine--;
            for (var i = 0; i < (this.lineCount - 1); i++) {
                this.chatTxt[i].setText(this.chatTxt[i+1].text);
            }
            this.chatTxt[this.currentLine].setText('');
        }

        if (this.buffer[0].length > 0) {
            var c = this.buffer[0].substr(0, 1);
            this.buffer[0] = this.buffer[0].substr(1);
            this.chatTxt[this.currentLine].setText(this.chatTxt[this.currentLine].text + c);
        } else {
            this.buffer.shift();
            this.currentLine++;
        }
    }
};

DialogComponent.prototype.setText = function(text) {
    var line;
    do {
        // Private method I wish was Public
        line = this.chatTxt[0].scanLine(this.chatTxt[0]._data.font, 1, text);
        this.buffer.push(line.text);
        text = text.substr(line.text.length + 1);
    } while (line.end === false);
};

DialogComponent.prototype.show = function() {
    this.container.visible = true;
};

DialogComponent.prototype.hide = function() {
    this.container.visible = false;
    this.clear();
};

DialogComponent.prototype.clear = function() {
    this.buffer = [];
    this.currentLine = 0;
    for (var i = 0; i < this.lineCount; i++) {
        this.chatTxt[i].setText('');
    }
};

module.exports = DialogComponent;

},{}],32:[function(require,module,exports){
/* global Phaser */

function Frame(game, config) {
    game.cache.addNinePatch('ninepatch_dialog', 'image_dialog', null, 8, 8, 16, 16);
    var frame = new Phaser.NinePatchImage(game, config.x, config.y, 'ninepatch_dialog');
    frame.targetWidth = config.width;
    frame.targetHeight = config.height;
    frame.fixedToCamera = true;
    frame.visible = false;

    this.frame = frame;
};

Frame.prototype.show = function() {
    this.frame.visible = true;
};

Frame.prototype.hide = function() {
    this.frame.visible = false;
};

module.exports = Frame;

},{}],33:[function(require,module,exports){
function MatteComponent (game) {
    var matte = game.add.graphics(0, 0);
    matte.fixedToCamera = true;
    matte.alpha = 1;

    this.matte = matte;
    this.game = game;
};

MatteComponent.prototype.transition = function (color, alpha, time, callback) {
    callback = callback || function() {};

    var game = this.game;
    var matte = this.matte;
    matte.clear();
    matte.beginFill(color, 1);
    matte.drawRect(0, 0, game.width, game.height);
    matte.endFill();

    var s = this.game.add.tween(this.matte);
    s.to({ alpha: alpha }, time, null);
    s.onComplete.add(callback);
    s.start();
};

module.exports = MatteComponent;

},{}],34:[function(require,module,exports){
/* global Phaser */

function MenuComponent (game, options) {
    game.cache.addNinePatch('ninepatch_dialog', 'image_dialog', null, 8, 8, 16, 16);
    this.container = new Phaser.NinePatchImage(game, options.x, options.y, 'ninepatch_dialog');
    this.container.targetWidth = options.width;
    this.container.targetHeight = options.height
    this.container.fixedToCamera = true;

    this.menuItems = [];
    this.menuItemCount = options.rows;
    this.options = [];
    this.selection = 0;
    for (var i = 0; i < this.menuItemCount; i++) {
        var menuItem = game.make.bitmapText(8, 8 + (i * 16), 'font_basic', '', 16, this.container);
        menuItem.maxWidth = options.width - 24;
        this.container.addChild(menuItem);
        this.menuItems.push(menuItem);
    }
    this.container.visible = false;
    this.setOptions();
};

MenuComponent.prototype.setOptions = function(options) {
    this.options = options || [];
    this.selection = 0;
    this.reset();
};

MenuComponent.prototype.reset = function() {
    var options = this.options;
    for (var i = 0; i < this.menuItemCount; i++) {
        var option = options[i];
        this.menuItems[i].setText((this.selection === i ? '@ ' : '') + ((option && option.text) || ''));
    }
};

MenuComponent.prototype.selectionUp = function() {
    this.selection--;
    if (this.selection < 0) {
        this.selection = 0;
    }
    this.reset();
};

MenuComponent.prototype.selectionDown = function() {
    this.selection++;
    if (this.selection >= this.menuItemCount) {
        this.selection = this.menuItemCount - 1;
    }
    this.reset();
};

MenuComponent.prototype.getSelectedId = function() {
    return this.options &&
        this.options[this.selection] &&
        this.options[this.selection].id;
};

MenuComponent.prototype.show = function() {
    this.container.visible = true;
};

MenuComponent.prototype.hide = function() {
    this.container.visible = false;
};

module.exports = MenuComponent;

},{}],35:[function(require,module,exports){
module.exports = {
    menu: require('./Menu'),
    matte: require('./Matte'),
    frame: require('./Frame'),
    battlebg: require('./BattleBackground')
};

},{"./BattleBackground":30,"./Frame":32,"./Matte":33,"./Menu":34}],36:[function(require,module,exports){

var Config = {};

Config.load = function (config) {
    this.config = config;
};

Config.getResource = function (id) {
    var data = this.config.resources[id];
    if (!data) {
        throw 'Invalid Resouce ID - ' + id;
    }
    data.id = id;
    return data;
};

Config.getConfig = function (key) {
    return this.config[key];
}

module.exports = Config;

},{}],37:[function(require,module,exports){
/* global Phaser */

var Config = require('./Config');

var Loader = {};

Loader.loadResource = function (game, id) {
    var self = this;
    var dep = Config.getResource(id);

    switch (dep.type) {
        case 'image':
            if (game.cache.checkImageKey(dep.id)) {
                return;
            }
            game.load.image(dep.id, dep.path);
            break;

        case 'sprite':
            break;

        case 'map':
            if (game.cache.checkTilemapKey(dep.id)) {
                return;
            }
            game.load.tilemap(dep.id, dep.path, null, Phaser.Tilemap.TILED_JSON);
            if (dep.tileset) {
                dep.tileset.forEach(function(tilesetId) {
                    self.loadResource(game, tilesetId);
                });
            }
            if (dep.bgm) {
                self.loadResource(game, dep.bgm);
            }
            break;

        case 'resources':
            if (dep.resources) {
                dep.resources.forEach(function(rId) {
                    self.loadResource(game, rId);
                });
            }
            break;

        case 'audio':
            if (game.cache.checkSoundKey(dep.id)) {
                return;
            }
            game.load.audio(dep.id, dep.path);
            break;

        case 'bitmapfont':
            if (game.cache.checkBitmapFontKey(dep.id)) {
                return;
            }
            game.load.bitmapFont(dep.id, dep.path, dep.meta);
            break;
    }
};

module.exports = Loader;

},{"./Config":36}],38:[function(require,module,exports){
var noop = function(callback) {
    return callback();
};

function SubState(state, substates) {
    this.parentState = state;
    this.substates = substates;
    this.currentState = null;
}

SubState.prototype.switch = function (id) {
    var self = this;
    var transitionOut = self.currentState && self.currentState.transitionOut ?
        self.currentState.transitionOut.bind(self.currentState) : noop;

    transitionOut(function() {
        if (self.currentState && self.currentState.exit) {
            self.currentState.exit();
        }
        self.currentState = null;
        var SubState = self.substates[id];
        var newState = new SubState(self.parentState);
        var transitionIn = newState && newState.transitionIn ?
            newState.transitionIn.bind(newState) : noop;

        transitionIn(function() {
            self.currentState = newState;
            if (self.currentState && self.currentState.enter) {
                self.currentState.enter();
            }
        });
    });
};

SubState.prototype.update = function () {
    if (this.currentState && this.currentState.update) {
        this.currentState.update();
    }
}


module.exports = SubState;

},{}],39:[function(require,module,exports){
module.exports={
  "name": "earthbound-js",
  "version": "0.0.1",
  "description": "An Earthbound Demo in Javascipt",
  "main": "build/js/app.min.js",
  "scripts": {
    "lint": "eslint --quiet --cache . --ext .js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Cary Stanley",
  "browser": {
    "Stats": "./js/lib/stats.min.js",
    "slopes": "./js/lib/phaser-arcade-slopes.min.js",
    "ninepatch": "./js/lib/nine-patch-phaser-plugin.min.js"
  },
  "devDependencies": {
    "browserify": "^13.0.0",
    "browserify-shim": "^3.8.12",
    "eslint": "^3.0.0",
    "grunt": "^0.4.5",
    "grunt-browserify": "^5.0.0",
    "grunt-cache-bust": "^1.1.1",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-compress": "^1.1.1",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-jade": "^1.0.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-stylus": "^1.2.0",
    "grunt-contrib-uglify": "^1.0.0",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-open": "^0.2.3",
    "phaser": "2.4.8",
    "pre-commit": "^1.1.0"
  },
  "eslintConfig": {
    "es6": true
  },
  "pre-commit": [
    "lint"
  ]
}

},{}]},{},[8])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
